name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        npm install -D @types/webpack@^5.28.5 ts-node@^10.9.2

    - name: Build and Test
      run: |
        npm run format:check
        npm run lint
        npm run compile
        npm run build
      env:
        NODE_ENV: production

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: vsix-package
        path: "*.vsix"
        retention-days: 1

    - name: Auto Version and Tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Setup git
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        # Commit any pending changes first
        git add -A
        git commit -m "chore: build artifacts" || echo "No changes to commit"
        
        # Read current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Calculate new version
        IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
        NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))"
        
        # Update package.json
        sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
        
        # Commit version bump and tag
        git add package.json
        git commit -m "chore: release v$NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Push changes
        git push origin main
        git push origin "v$NEW_VERSION"

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v3

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: vsix-package

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: "*.vsix"
        name: "Release v${{ steps.get_version.outputs.version }}"
        body: |
          ## What's Changed
          
          ### New Features üéâ
          - Auto-generated release notes
          
          ### Bug Fixes üêõ
          - Dependency updates
          
          ### Documentation üìö
          - Updated README
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}