name: CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

# Add permissions at workflow level
permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Fresh checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git config --global pull.rebase true

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        npm install -D @types/webpack@^5.28.5 ts-node@^10.9.2

    - name: Build and Test
      run: |
        npm run format:check
        npm run lint
        npm run compile
        npm run build
      env:
        NODE_ENV: production

    - name: Auto Version and Tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      id: version
      run: |
        # Sync with remote
        git fetch origin main
        git rebase origin/main
        
        # Read current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Calculate new version
        IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
        NEW_VERSION="${version_parts[0]}.${version_parts[1]}.$((version_parts[2] + 1))"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update package.json
        sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$NEW_VERSION\"/" package.json
        
        # Commit version bump and tag
        git add package.json
        git commit -m "chore: release v$NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
        # Push changes
        git push origin main
        git push origin "v$NEW_VERSION"

    # Package VSIX after version update
    - name: Package VSIX
      if: steps.version.outputs.new_version != ''
      run: npx vsce package

    - name: Create Release
      if: steps.version.outputs.new_version != ''
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ steps.version.outputs.new_version }}"
        name: "Aurora v${{ steps.version.outputs.new_version }}"
        files: "*.vsix"
        draft: false
        prerelease: false
        body: |
          ## What's Changed

          ### Features
          - AI-powered code assistance
          - Natural language processing
          - Code generation and refactoring
          - Intelligent code suggestions

          ### Improvements
          - Enhanced build process
          - Automated release workflow
          - Improved error handling
          - Better documentation

          ### Installation
          1. Download the VSIX file
          2. Install via VS Code Extensions menu
          3. Reload VS Code
          4. Configure your API key

          For full documentation, visit our [GitHub repository](https://github.com/itz4blitz/aurora).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}